program ::= 'Program' id ';' var_declaration* func_def* main
main ::= 'main' '()' '{' statement+ '}' 
func_def ::= 'func' id '(' param_declaration* ')' ':' atomic_type
var_declaration* '{' statement* '}'
param_declaration ::= 'var' atomic_type id ';'
var_declaration ::= 'var' var_type id ';'
assignment ::= id '=' (var_cons | list_assignment | matrix_assignment)
matrix_assignment ::= '[' list_assignment (',' list_assignment)* ','? ']'
list_assignment ::= '[' var_cons (',' var_cons)* ']'
comment ::= '#' [^#]* '#'
statement ::= ((assignment | special_function | function_call | return_stmt) ';') | conditional | for | while | comment
return_stmt ::= 'return' expression
special_function ::= read | print | plot | sum | min | max | prod | avg | mode | median | sin | cos | tan | sqrt | floor | ceil | abs | not | list_access | list_assign
read ::= 'read' '(' id (',' id)* ')'
list_access ::=
	'listAccess' '(' id ',' expression (',' expression)? ')'
list_assign ::=
	'listAssign' '(' id ',' expression ',' (
		expression
		| list_assignment
	) (',' expression)? ')'
plot ::= 'plot' '(' expression ')'
sum ::= 'sum' '(' expression ')'
min ::= 'min' '(' expression ')'
max ::= 'max' '(' expression ')'
prod ::= 'prod' '(' expression ')'
avg ::= 'avg' '(' expression ')'
mode ::= 'sMode' '(' expression ')'
median ::= 'median' '(' expression ')'
sin ::= 'sin' '(' expression ')'
tan ::= 'tan' '(' expression ')'
cos ::= 'cos' '(' expression ')'
sqrt ::= 'sqrt' '(' expression ')'
floor ::= 'floor' '(' expression ')'
ceil ::= 'ceil' '(' expression ')'
abs ::= 'abs' '(' expression ')'
not ::= 'not' '(' expression ')'
for ::= 'for' '(' id 'in' expression ')' '{' statement+ '}'
while ::= 'while' '(' expression ')' '{' statement+ '}'
conditional ::= ('if' '(' expression ')' '{' statement+ '}') ('else if' '(' expression ')' '{' statement+ '}')* ('else' '{' statement+ '}')?
print ::= 'print' '(' (expression) ( ',' (expression) )* ')'
expression ::= exp (('<' | '>' | '<=' | '>=' | '==' | '!=' | '&&' | '||') exp)?
exp ::= term (('+' | '-') term)?*
function_call ::= (id '(' (expression (',' expression)*)? ')')
term ::= factor (('*' | '/' | '%') factor)*
factor ::= '-'? (('('expression')') | list_access | special_function | function_call | var_cons)
atomic_type ::= ('int' | 'float' | 'string' | 'bool' | 'void') 
var_type ::= ('int' | 'float' | 'string' | 'bool') cardinality?
cardinality ::= '[' int_cons ']' | '[' int_cons ']' '[' int_cons ']'
var_cons ::= string_cons | int_cons | float_cons | id | bool_cons
string_cons ::= '"' [^"]* '"'
float_cons ::= [0-9]+'.'[0-9]+
int_cons ::= [0-9]+
bool_cons ::= 'true' | 'false'
id ::= ('_'| [a-zA-Z] )+[0-9a-zA-Z]*
