// Generated from /Users/daniel/compiladores/bistat/parser/Bistat.g4 by ANTLR 4.9.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BistatLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, WS=43, NON_VOID_TYPE=44, RETURN_TYPE=45, 
		PARAM_TYPE=46, ID=47, PARAM_CARDINALITY=48, CARDINALITY=49, VAR_CONS=50, 
		BOOL_CONS=51, STRING_CONS=52, FLOAT_CONS=53, INT_CONS=54, OP_SEC=55, OP_FIRST=56, 
		LOGIC_OPERATOR=57, NUMBER=58;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
			"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
			"T__41", "WS", "NON_VOID_TYPE", "RETURN_TYPE", "PARAM_TYPE", "Type_Primitive", 
			"ID", "PARAM_CARDINALITY", "CARDINALITY", "VAR_CONS", "BOOL_CONS", "STRING_CONS", 
			"FLOAT_CONS", "INT_CONS", "OP_SEC", "OP_FIRST", "LOGIC_OPERATOR", "Alpha", 
			"NUMBER"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'Program'", "';'", "'var'", "'func'", "'('", "')'", "':'", "'{'", 
			"'}'", "'main'", "'='", "'['", "','", "']'", "'#'", "'for'", "'in'", 
			"'while'", "'if'", "'else'", "'read'", "'print'", "'list_add'", "'list_pop'", 
			"'length'", "'range'", "'plot'", "'sum'", "'min'", "'prod'", "'avg'", 
			"'s_mode'", "'median'", "'sin'", "'tan'", "'cos'", "'sort'", "'sqrt'", 
			"'floor'", "'ceil'", "'abs'", "'not'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, "WS", "NON_VOID_TYPE", "RETURN_TYPE", 
			"PARAM_TYPE", "ID", "PARAM_CARDINALITY", "CARDINALITY", "VAR_CONS", "BOOL_CONS", 
			"STRING_CONS", "FLOAT_CONS", "INT_CONS", "OP_SEC", "OP_FIRST", "LOGIC_OPERATOR", 
			"NUMBER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public BistatLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Bistat.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2<\u01c2\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3"+
		"\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13"+
		"\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\22"+
		"\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25"+
		"\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\30"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36"+
		"\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3\"\3"+
		"\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3"+
		"&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3*\3*"+
		"\3+\3+\3+\3+\3,\6,\u0135\n,\r,\16,\u0136\3,\3,\3-\3-\5-\u013d\n-\3.\3"+
		".\3.\3.\3.\5.\u0144\n.\3/\3/\5/\u0148\n/\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u015c"+
		"\n\60\3\61\3\61\6\61\u0160\n\61\r\61\16\61\u0161\3\61\3\61\3\61\7\61\u0167"+
		"\n\61\f\61\16\61\u016a\13\61\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0172"+
		"\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u017f"+
		"\n\63\3\64\3\64\3\64\3\64\3\64\5\64\u0186\n\64\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\5\65\u0191\n\65\3\66\3\66\7\66\u0195\n\66\f\66\16"+
		"\66\u0198\13\66\3\66\3\66\3\67\6\67\u019d\n\67\r\67\16\67\u019e\3\67\3"+
		"\67\6\67\u01a3\n\67\r\67\16\67\u01a4\38\68\u01a8\n8\r8\168\u01a9\39\3"+
		"9\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u01bd\n;\3<\3<\3=\3"+
		"=\2\2>\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17"+
		"\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\35"+
		"9\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\2a\61c\62e\63g\64i\65"+
		"k\66m\67o8q9s:u;w\2y<\3\2\b\5\2\13\f\17\17\"\"\3\2$$\4\2--//\5\2\'\',"+
		",\61\61\4\2>>@@\4\2C\\c|\2\u01dc\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2"+
		"\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2"+
		"\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2"+
		"\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2"+
		"\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2"+
		"\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2"+
		"\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O"+
		"\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2"+
		"\2\2\2]\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2"+
		"\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2y"+
		"\3\2\2\2\3{\3\2\2\2\5\u0083\3\2\2\2\7\u0085\3\2\2\2\t\u0089\3\2\2\2\13"+
		"\u008e\3\2\2\2\r\u0090\3\2\2\2\17\u0092\3\2\2\2\21\u0094\3\2\2\2\23\u0096"+
		"\3\2\2\2\25\u0098\3\2\2\2\27\u009d\3\2\2\2\31\u009f\3\2\2\2\33\u00a1\3"+
		"\2\2\2\35\u00a3\3\2\2\2\37\u00a5\3\2\2\2!\u00a7\3\2\2\2#\u00ab\3\2\2\2"+
		"%\u00ae\3\2\2\2\'\u00b4\3\2\2\2)\u00b7\3\2\2\2+\u00bc\3\2\2\2-\u00c1\3"+
		"\2\2\2/\u00c7\3\2\2\2\61\u00d0\3\2\2\2\63\u00d9\3\2\2\2\65\u00e0\3\2\2"+
		"\2\67\u00e6\3\2\2\29\u00eb\3\2\2\2;\u00ef\3\2\2\2=\u00f3\3\2\2\2?\u00f8"+
		"\3\2\2\2A\u00fc\3\2\2\2C\u0103\3\2\2\2E\u010a\3\2\2\2G\u010e\3\2\2\2I"+
		"\u0112\3\2\2\2K\u0116\3\2\2\2M\u011b\3\2\2\2O\u0120\3\2\2\2Q\u0126\3\2"+
		"\2\2S\u012b\3\2\2\2U\u012f\3\2\2\2W\u0134\3\2\2\2Y\u013a\3\2\2\2[\u0143"+
		"\3\2\2\2]\u0145\3\2\2\2_\u015b\3\2\2\2a\u015f\3\2\2\2c\u0171\3\2\2\2e"+
		"\u017e\3\2\2\2g\u0185\3\2\2\2i\u0190\3\2\2\2k\u0192\3\2\2\2m\u019c\3\2"+
		"\2\2o\u01a7\3\2\2\2q\u01ab\3\2\2\2s\u01ad\3\2\2\2u\u01bc\3\2\2\2w\u01be"+
		"\3\2\2\2y\u01c0\3\2\2\2{|\7R\2\2|}\7t\2\2}~\7q\2\2~\177\7i\2\2\177\u0080"+
		"\7t\2\2\u0080\u0081\7c\2\2\u0081\u0082\7o\2\2\u0082\4\3\2\2\2\u0083\u0084"+
		"\7=\2\2\u0084\6\3\2\2\2\u0085\u0086\7x\2\2\u0086\u0087\7c\2\2\u0087\u0088"+
		"\7t\2\2\u0088\b\3\2\2\2\u0089\u008a\7h\2\2\u008a\u008b\7w\2\2\u008b\u008c"+
		"\7p\2\2\u008c\u008d\7e\2\2\u008d\n\3\2\2\2\u008e\u008f\7*\2\2\u008f\f"+
		"\3\2\2\2\u0090\u0091\7+\2\2\u0091\16\3\2\2\2\u0092\u0093\7<\2\2\u0093"+
		"\20\3\2\2\2\u0094\u0095\7}\2\2\u0095\22\3\2\2\2\u0096\u0097\7\177\2\2"+
		"\u0097\24\3\2\2\2\u0098\u0099\7o\2\2\u0099\u009a\7c\2\2\u009a\u009b\7"+
		"k\2\2\u009b\u009c\7p\2\2\u009c\26\3\2\2\2\u009d\u009e\7?\2\2\u009e\30"+
		"\3\2\2\2\u009f\u00a0\7]\2\2\u00a0\32\3\2\2\2\u00a1\u00a2\7.\2\2\u00a2"+
		"\34\3\2\2\2\u00a3\u00a4\7_\2\2\u00a4\36\3\2\2\2\u00a5\u00a6\7%\2\2\u00a6"+
		" \3\2\2\2\u00a7\u00a8\7h\2\2\u00a8\u00a9\7q\2\2\u00a9\u00aa\7t\2\2\u00aa"+
		"\"\3\2\2\2\u00ab\u00ac\7k\2\2\u00ac\u00ad\7p\2\2\u00ad$\3\2\2\2\u00ae"+
		"\u00af\7y\2\2\u00af\u00b0\7j\2\2\u00b0\u00b1\7k\2\2\u00b1\u00b2\7n\2\2"+
		"\u00b2\u00b3\7g\2\2\u00b3&\3\2\2\2\u00b4\u00b5\7k\2\2\u00b5\u00b6\7h\2"+
		"\2\u00b6(\3\2\2\2\u00b7\u00b8\7g\2\2\u00b8\u00b9\7n\2\2\u00b9\u00ba\7"+
		"u\2\2\u00ba\u00bb\7g\2\2\u00bb*\3\2\2\2\u00bc\u00bd\7t\2\2\u00bd\u00be"+
		"\7g\2\2\u00be\u00bf\7c\2\2\u00bf\u00c0\7f\2\2\u00c0,\3\2\2\2\u00c1\u00c2"+
		"\7r\2\2\u00c2\u00c3\7t\2\2\u00c3\u00c4\7k\2\2\u00c4\u00c5\7p\2\2\u00c5"+
		"\u00c6\7v\2\2\u00c6.\3\2\2\2\u00c7\u00c8\7n\2\2\u00c8\u00c9\7k\2\2\u00c9"+
		"\u00ca\7u\2\2\u00ca\u00cb\7v\2\2\u00cb\u00cc\7a\2\2\u00cc\u00cd\7c\2\2"+
		"\u00cd\u00ce\7f\2\2\u00ce\u00cf\7f\2\2\u00cf\60\3\2\2\2\u00d0\u00d1\7"+
		"n\2\2\u00d1\u00d2\7k\2\2\u00d2\u00d3\7u\2\2\u00d3\u00d4\7v\2\2\u00d4\u00d5"+
		"\7a\2\2\u00d5\u00d6\7r\2\2\u00d6\u00d7\7q\2\2\u00d7\u00d8\7r\2\2\u00d8"+
		"\62\3\2\2\2\u00d9\u00da\7n\2\2\u00da\u00db\7g\2\2\u00db\u00dc\7p\2\2\u00dc"+
		"\u00dd\7i\2\2\u00dd\u00de\7v\2\2\u00de\u00df\7j\2\2\u00df\64\3\2\2\2\u00e0"+
		"\u00e1\7t\2\2\u00e1\u00e2\7c\2\2\u00e2\u00e3\7p\2\2\u00e3\u00e4\7i\2\2"+
		"\u00e4\u00e5\7g\2\2\u00e5\66\3\2\2\2\u00e6\u00e7\7r\2\2\u00e7\u00e8\7"+
		"n\2\2\u00e8\u00e9\7q\2\2\u00e9\u00ea\7v\2\2\u00ea8\3\2\2\2\u00eb\u00ec"+
		"\7u\2\2\u00ec\u00ed\7w\2\2\u00ed\u00ee\7o\2\2\u00ee:\3\2\2\2\u00ef\u00f0"+
		"\7o\2\2\u00f0\u00f1\7k\2\2\u00f1\u00f2\7p\2\2\u00f2<\3\2\2\2\u00f3\u00f4"+
		"\7r\2\2\u00f4\u00f5\7t\2\2\u00f5\u00f6\7q\2\2\u00f6\u00f7\7f\2\2\u00f7"+
		">\3\2\2\2\u00f8\u00f9\7c\2\2\u00f9\u00fa\7x\2\2\u00fa\u00fb\7i\2\2\u00fb"+
		"@\3\2\2\2\u00fc\u00fd\7u\2\2\u00fd\u00fe\7a\2\2\u00fe\u00ff\7o\2\2\u00ff"+
		"\u0100\7q\2\2\u0100\u0101\7f\2\2\u0101\u0102\7g\2\2\u0102B\3\2\2\2\u0103"+
		"\u0104\7o\2\2\u0104\u0105\7g\2\2\u0105\u0106\7f\2\2\u0106\u0107\7k\2\2"+
		"\u0107\u0108\7c\2\2\u0108\u0109\7p\2\2\u0109D\3\2\2\2\u010a\u010b\7u\2"+
		"\2\u010b\u010c\7k\2\2\u010c\u010d\7p\2\2\u010dF\3\2\2\2\u010e\u010f\7"+
		"v\2\2\u010f\u0110\7c\2\2\u0110\u0111\7p\2\2\u0111H\3\2\2\2\u0112\u0113"+
		"\7e\2\2\u0113\u0114\7q\2\2\u0114\u0115\7u\2\2\u0115J\3\2\2\2\u0116\u0117"+
		"\7u\2\2\u0117\u0118\7q\2\2\u0118\u0119\7t\2\2\u0119\u011a\7v\2\2\u011a"+
		"L\3\2\2\2\u011b\u011c\7u\2\2\u011c\u011d\7s\2\2\u011d\u011e\7t\2\2\u011e"+
		"\u011f\7v\2\2\u011fN\3\2\2\2\u0120\u0121\7h\2\2\u0121\u0122\7n\2\2\u0122"+
		"\u0123\7q\2\2\u0123\u0124\7q\2\2\u0124\u0125\7t\2\2\u0125P\3\2\2\2\u0126"+
		"\u0127\7e\2\2\u0127\u0128\7g\2\2\u0128\u0129\7k\2\2\u0129\u012a\7n\2\2"+
		"\u012aR\3\2\2\2\u012b\u012c\7c\2\2\u012c\u012d\7d\2\2\u012d\u012e\7u\2"+
		"\2\u012eT\3\2\2\2\u012f\u0130\7p\2\2\u0130\u0131\7q\2\2\u0131\u0132\7"+
		"v\2\2\u0132V\3\2\2\2\u0133\u0135\t\2\2\2\u0134\u0133\3\2\2\2\u0135\u0136"+
		"\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\3\2\2\2\u0138"+
		"\u0139\b,\2\2\u0139X\3\2\2\2\u013a\u013c\5_\60\2\u013b\u013d\5e\63\2\u013c"+
		"\u013b\3\2\2\2\u013c\u013d\3\2\2\2\u013dZ\3\2\2\2\u013e\u0144\5Y-\2\u013f"+
		"\u0140\7x\2\2\u0140\u0141\7q\2\2\u0141\u0142\7k\2\2\u0142\u0144\7f\2\2"+
		"\u0143\u013e\3\2\2\2\u0143\u013f\3\2\2\2\u0144\\\3\2\2\2\u0145\u0147\5"+
		"_\60\2\u0146\u0148\5c\62\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148"+
		"^\3\2\2\2\u0149\u014a\7k\2\2\u014a\u014b\7p\2\2\u014b\u015c\7v\2\2\u014c"+
		"\u014d\7h\2\2\u014d\u014e\7n\2\2\u014e\u014f\7q\2\2\u014f\u0150\7c\2\2"+
		"\u0150\u015c\7v\2\2\u0151\u0152\7u\2\2\u0152\u0153\7v\2\2\u0153\u0154"+
		"\7t\2\2\u0154\u0155\7k\2\2\u0155\u0156\7p\2\2\u0156\u015c\7i\2\2\u0157"+
		"\u0158\7d\2\2\u0158\u0159\7q\2\2\u0159\u015a\7q\2\2\u015a\u015c\7n\2\2"+
		"\u015b\u0149\3\2\2\2\u015b\u014c\3\2\2\2\u015b\u0151\3\2\2\2\u015b\u0157"+
		"\3\2\2\2\u015c`\3\2\2\2\u015d\u0160\7a\2\2\u015e\u0160\5w<\2\u015f\u015d"+
		"\3\2\2\2\u015f\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u015f\3\2\2\2\u0161"+
		"\u0162\3\2\2\2\u0162\u0168\3\2\2\2\u0163\u0167\5w<\2\u0164\u0167\5y=\2"+
		"\u0165\u0167\7a\2\2\u0166\u0163\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0165"+
		"\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169"+
		"b\3\2\2\2\u016a\u0168\3\2\2\2\u016b\u016c\7]\2\2\u016c\u0172\7_\2\2\u016d"+
		"\u016e\7]\2\2\u016e\u016f\7_\2\2\u016f\u0170\7]\2\2\u0170\u0172\7_\2\2"+
		"\u0171\u016b\3\2\2\2\u0171\u016d\3\2\2\2\u0172d\3\2\2\2\u0173\u0174\7"+
		"]\2\2\u0174\u0175\5o8\2\u0175\u0176\7_\2\2\u0176\u017f\3\2\2\2\u0177\u0178"+
		"\7]\2\2\u0178\u0179\5o8\2\u0179\u017a\7_\2\2\u017a\u017b\7]\2\2\u017b"+
		"\u017c\5o8\2\u017c\u017d\7_\2\2\u017d\u017f\3\2\2\2\u017e\u0173\3\2\2"+
		"\2\u017e\u0177\3\2\2\2\u017ff\3\2\2\2\u0180\u0186\5k\66\2\u0181\u0186"+
		"\5m\67\2\u0182\u0186\5o8\2\u0183\u0186\5i\65\2\u0184\u0186\5a\61\2\u0185"+
		"\u0180\3\2\2\2\u0185\u0181\3\2\2\2\u0185\u0182\3\2\2\2\u0185\u0183\3\2"+
		"\2\2\u0185\u0184\3\2\2\2\u0186h\3\2\2\2\u0187\u0188\7v\2\2\u0188\u0189"+
		"\7t\2\2\u0189\u018a\7w\2\2\u018a\u0191\7g\2\2\u018b\u018c\7h\2\2\u018c"+
		"\u018d\7c\2\2\u018d\u018e\7n\2\2\u018e\u018f\7u\2\2\u018f\u0191\7g\2\2"+
		"\u0190\u0187\3\2\2\2\u0190\u018b\3\2\2\2\u0191j\3\2\2\2\u0192\u0196\7"+
		"$\2\2\u0193\u0195\n\3\2\2\u0194\u0193\3\2\2\2\u0195\u0198\3\2\2\2\u0196"+
		"\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0199\3\2\2\2\u0198\u0196\3\2"+
		"\2\2\u0199\u019a\7$\2\2\u019al\3\2\2\2\u019b\u019d\5y=\2\u019c\u019b\3"+
		"\2\2\2\u019d\u019e\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f"+
		"\u01a0\3\2\2\2\u01a0\u01a2\7\60\2\2\u01a1\u01a3\5y=\2\u01a2\u01a1\3\2"+
		"\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5"+
		"n\3\2\2\2\u01a6\u01a8\5y=\2\u01a7\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9"+
		"\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aap\3\2\2\2\u01ab\u01ac\t\4\2\2"+
		"\u01acr\3\2\2\2\u01ad\u01ae\t\5\2\2\u01aet\3\2\2\2\u01af\u01bd\t\6\2\2"+
		"\u01b0\u01b1\7>\2\2\u01b1\u01bd\7?\2\2\u01b2\u01b3\7@\2\2\u01b3\u01bd"+
		"\7?\2\2\u01b4\u01b5\7?\2\2\u01b5\u01bd\7?\2\2\u01b6\u01b7\7#\2\2\u01b7"+
		"\u01bd\7?\2\2\u01b8\u01b9\7(\2\2\u01b9\u01bd\7(\2\2\u01ba\u01bb\7~\2\2"+
		"\u01bb\u01bd\7~\2\2\u01bc\u01af\3\2\2\2\u01bc\u01b0\3\2\2\2\u01bc\u01b2"+
		"\3\2\2\2\u01bc\u01b4\3\2\2\2\u01bc\u01b6\3\2\2\2\u01bc\u01b8\3\2\2\2\u01bc"+
		"\u01ba\3\2\2\2\u01bdv\3\2\2\2\u01be\u01bf\t\7\2\2\u01bfx\3\2\2\2\u01c0"+
		"\u01c1\4\62;\2\u01c1z\3\2\2\2\25\2\u0136\u013c\u0143\u0147\u015b\u015f"+
		"\u0161\u0166\u0168\u0171\u017e\u0185\u0190\u0196\u019e\u01a4\u01a9\u01bc"+
		"\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}