// Generated from /Users/daniel/compiladores/bistat/parser/Bistat.g4 by ANTLR 4.9.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class BistatLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, WS=57, CARDINALITY=58, TYPE_PRIMITIVE=59, 
		ID=60, INT_CONS=61, NUMBER=62, BOOL_CONS=63, STRING_CONS=64, FLOAT_CONS=65;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
			"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
			"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
			"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
			"T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "WS", 
			"CARDINALITY", "TYPE_PRIMITIVE", "ID", "INT_CONS", "NUMBER", "BOOL_CONS", 
			"STRING_CONS", "FLOAT_CONS", "Alpha"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'Program'", "';'", "'var'", "'func'", "'('", "')'", "':'", "'{'", 
			"'}'", "'main'", "'='", "'['", "','", "']'", "'#'", "'for'", "'in'", 
			"'while'", "'if'", "'else'", "'return'", "'read'", "'print'", "'listAdd'", 
			"'listPop'", "'length'", "'range'", "'plot'", "'sum'", "'min'", "'prod'", 
			"'avg'", "'sMode'", "'median'", "'sin'", "'tan'", "'cos'", "'sort'", 
			"'sqrt'", "'floor'", "'ceil'", "'abs'", "'not'", "'-'", "'+'", "'/'", 
			"'*'", "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "WS", "CARDINALITY", 
			"TYPE_PRIMITIVE", "ID", "INT_CONS", "NUMBER", "BOOL_CONS", "STRING_CONS", 
			"FLOAT_CONS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public BistatLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Bistat.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2C\u01c5\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3"+
		"\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t"+
		"\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3"+
		"\17\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3"+
		" \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3"+
		"#\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3("+
		"\3(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3+\3,\3,\3,\3,\3-\3-\3."+
		"\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3\65"+
		"\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\38\38\38\39\39\39\3:\6:\u0165"+
		"\n:\r:\16:\u0166\3:\3:\3;\3;\5;\u016d\n;\3;\3;\3;\3;\5;\u0173\n;\3;\5"+
		";\u0176\n;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\5<\u018e\n<\3=\3=\6=\u0192\n=\r=\16=\u0193\3=\3=\3=\7=\u0199\n"+
		"=\f=\16=\u019c\13=\3>\6>\u019f\n>\r>\16>\u01a0\3?\3?\3@\3@\3@\3@\3@\3"+
		"@\3@\3@\3@\5@\u01ae\n@\3A\3A\7A\u01b2\nA\fA\16A\u01b5\13A\3A\3A\3B\6B"+
		"\u01ba\nB\rB\16B\u01bb\3B\3B\6B\u01c0\nB\rB\16B\u01c1\3C\3C\2\2D\3\3\5"+
		"\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21"+
		"!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!"+
		"A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s"+
		";u<w=y>{?}@\177A\u0081B\u0083C\u0085\2\3\2\5\5\2\13\f\17\17\"\"\3\2$$"+
		"\4\2C\\c|\2\u01d5\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E"+
		"\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2"+
		"\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2"+
		"\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k"+
		"\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2"+
		"\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2\2"+
		"\u0083\3\2\2\2\3\u0087\3\2\2\2\5\u008f\3\2\2\2\7\u0091\3\2\2\2\t\u0095"+
		"\3\2\2\2\13\u009a\3\2\2\2\r\u009c\3\2\2\2\17\u009e\3\2\2\2\21\u00a0\3"+
		"\2\2\2\23\u00a2\3\2\2\2\25\u00a4\3\2\2\2\27\u00a9\3\2\2\2\31\u00ab\3\2"+
		"\2\2\33\u00ad\3\2\2\2\35\u00af\3\2\2\2\37\u00b1\3\2\2\2!\u00b3\3\2\2\2"+
		"#\u00b7\3\2\2\2%\u00ba\3\2\2\2\'\u00c0\3\2\2\2)\u00c3\3\2\2\2+\u00c8\3"+
		"\2\2\2-\u00cf\3\2\2\2/\u00d4\3\2\2\2\61\u00da\3\2\2\2\63\u00e2\3\2\2\2"+
		"\65\u00ea\3\2\2\2\67\u00f1\3\2\2\29\u00f7\3\2\2\2;\u00fc\3\2\2\2=\u0100"+
		"\3\2\2\2?\u0104\3\2\2\2A\u0109\3\2\2\2C\u010d\3\2\2\2E\u0113\3\2\2\2G"+
		"\u011a\3\2\2\2I\u011e\3\2\2\2K\u0122\3\2\2\2M\u0126\3\2\2\2O\u012b\3\2"+
		"\2\2Q\u0130\3\2\2\2S\u0136\3\2\2\2U\u013b\3\2\2\2W\u013f\3\2\2\2Y\u0143"+
		"\3\2\2\2[\u0145\3\2\2\2]\u0147\3\2\2\2_\u0149\3\2\2\2a\u014b\3\2\2\2c"+
		"\u014d\3\2\2\2e\u014f\3\2\2\2g\u0151\3\2\2\2i\u0154\3\2\2\2k\u0157\3\2"+
		"\2\2m\u015a\3\2\2\2o\u015d\3\2\2\2q\u0160\3\2\2\2s\u0164\3\2\2\2u\u016a"+
		"\3\2\2\2w\u018d\3\2\2\2y\u0191\3\2\2\2{\u019e\3\2\2\2}\u01a2\3\2\2\2\177"+
		"\u01ad\3\2\2\2\u0081\u01af\3\2\2\2\u0083\u01b9\3\2\2\2\u0085\u01c3\3\2"+
		"\2\2\u0087\u0088\7R\2\2\u0088\u0089\7t\2\2\u0089\u008a\7q\2\2\u008a\u008b"+
		"\7i\2\2\u008b\u008c\7t\2\2\u008c\u008d\7c\2\2\u008d\u008e\7o\2\2\u008e"+
		"\4\3\2\2\2\u008f\u0090\7=\2\2\u0090\6\3\2\2\2\u0091\u0092\7x\2\2\u0092"+
		"\u0093\7c\2\2\u0093\u0094\7t\2\2\u0094\b\3\2\2\2\u0095\u0096\7h\2\2\u0096"+
		"\u0097\7w\2\2\u0097\u0098\7p\2\2\u0098\u0099\7e\2\2\u0099\n\3\2\2\2\u009a"+
		"\u009b\7*\2\2\u009b\f\3\2\2\2\u009c\u009d\7+\2\2\u009d\16\3\2\2\2\u009e"+
		"\u009f\7<\2\2\u009f\20\3\2\2\2\u00a0\u00a1\7}\2\2\u00a1\22\3\2\2\2\u00a2"+
		"\u00a3\7\177\2\2\u00a3\24\3\2\2\2\u00a4\u00a5\7o\2\2\u00a5\u00a6\7c\2"+
		"\2\u00a6\u00a7\7k\2\2\u00a7\u00a8\7p\2\2\u00a8\26\3\2\2\2\u00a9\u00aa"+
		"\7?\2\2\u00aa\30\3\2\2\2\u00ab\u00ac\7]\2\2\u00ac\32\3\2\2\2\u00ad\u00ae"+
		"\7.\2\2\u00ae\34\3\2\2\2\u00af\u00b0\7_\2\2\u00b0\36\3\2\2\2\u00b1\u00b2"+
		"\7%\2\2\u00b2 \3\2\2\2\u00b3\u00b4\7h\2\2\u00b4\u00b5\7q\2\2\u00b5\u00b6"+
		"\7t\2\2\u00b6\"\3\2\2\2\u00b7\u00b8\7k\2\2\u00b8\u00b9\7p\2\2\u00b9$\3"+
		"\2\2\2\u00ba\u00bb\7y\2\2\u00bb\u00bc\7j\2\2\u00bc\u00bd\7k\2\2\u00bd"+
		"\u00be\7n\2\2\u00be\u00bf\7g\2\2\u00bf&\3\2\2\2\u00c0\u00c1\7k\2\2\u00c1"+
		"\u00c2\7h\2\2\u00c2(\3\2\2\2\u00c3\u00c4\7g\2\2\u00c4\u00c5\7n\2\2\u00c5"+
		"\u00c6\7u\2\2\u00c6\u00c7\7g\2\2\u00c7*\3\2\2\2\u00c8\u00c9\7t\2\2\u00c9"+
		"\u00ca\7g\2\2\u00ca\u00cb\7v\2\2\u00cb\u00cc\7w\2\2\u00cc\u00cd\7t\2\2"+
		"\u00cd\u00ce\7p\2\2\u00ce,\3\2\2\2\u00cf\u00d0\7t\2\2\u00d0\u00d1\7g\2"+
		"\2\u00d1\u00d2\7c\2\2\u00d2\u00d3\7f\2\2\u00d3.\3\2\2\2\u00d4\u00d5\7"+
		"r\2\2\u00d5\u00d6\7t\2\2\u00d6\u00d7\7k\2\2\u00d7\u00d8\7p\2\2\u00d8\u00d9"+
		"\7v\2\2\u00d9\60\3\2\2\2\u00da\u00db\7n\2\2\u00db\u00dc\7k\2\2\u00dc\u00dd"+
		"\7u\2\2\u00dd\u00de\7v\2\2\u00de\u00df\7C\2\2\u00df\u00e0\7f\2\2\u00e0"+
		"\u00e1\7f\2\2\u00e1\62\3\2\2\2\u00e2\u00e3\7n\2\2\u00e3\u00e4\7k\2\2\u00e4"+
		"\u00e5\7u\2\2\u00e5\u00e6\7v\2\2\u00e6\u00e7\7R\2\2\u00e7\u00e8\7q\2\2"+
		"\u00e8\u00e9\7r\2\2\u00e9\64\3\2\2\2\u00ea\u00eb\7n\2\2\u00eb\u00ec\7"+
		"g\2\2\u00ec\u00ed\7p\2\2\u00ed\u00ee\7i\2\2\u00ee\u00ef\7v\2\2\u00ef\u00f0"+
		"\7j\2\2\u00f0\66\3\2\2\2\u00f1\u00f2\7t\2\2\u00f2\u00f3\7c\2\2\u00f3\u00f4"+
		"\7p\2\2\u00f4\u00f5\7i\2\2\u00f5\u00f6\7g\2\2\u00f68\3\2\2\2\u00f7\u00f8"+
		"\7r\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa\7q\2\2\u00fa\u00fb\7v\2\2\u00fb"+
		":\3\2\2\2\u00fc\u00fd\7u\2\2\u00fd\u00fe\7w\2\2\u00fe\u00ff\7o\2\2\u00ff"+
		"<\3\2\2\2\u0100\u0101\7o\2\2\u0101\u0102\7k\2\2\u0102\u0103\7p\2\2\u0103"+
		">\3\2\2\2\u0104\u0105\7r\2\2\u0105\u0106\7t\2\2\u0106\u0107\7q\2\2\u0107"+
		"\u0108\7f\2\2\u0108@\3\2\2\2\u0109\u010a\7c\2\2\u010a\u010b\7x\2\2\u010b"+
		"\u010c\7i\2\2\u010cB\3\2\2\2\u010d\u010e\7u\2\2\u010e\u010f\7O\2\2\u010f"+
		"\u0110\7q\2\2\u0110\u0111\7f\2\2\u0111\u0112\7g\2\2\u0112D\3\2\2\2\u0113"+
		"\u0114\7o\2\2\u0114\u0115\7g\2\2\u0115\u0116\7f\2\2\u0116\u0117\7k\2\2"+
		"\u0117\u0118\7c\2\2\u0118\u0119\7p\2\2\u0119F\3\2\2\2\u011a\u011b\7u\2"+
		"\2\u011b\u011c\7k\2\2\u011c\u011d\7p\2\2\u011dH\3\2\2\2\u011e\u011f\7"+
		"v\2\2\u011f\u0120\7c\2\2\u0120\u0121\7p\2\2\u0121J\3\2\2\2\u0122\u0123"+
		"\7e\2\2\u0123\u0124\7q\2\2\u0124\u0125\7u\2\2\u0125L\3\2\2\2\u0126\u0127"+
		"\7u\2\2\u0127\u0128\7q\2\2\u0128\u0129\7t\2\2\u0129\u012a\7v\2\2\u012a"+
		"N\3\2\2\2\u012b\u012c\7u\2\2\u012c\u012d\7s\2\2\u012d\u012e\7t\2\2\u012e"+
		"\u012f\7v\2\2\u012fP\3\2\2\2\u0130\u0131\7h\2\2\u0131\u0132\7n\2\2\u0132"+
		"\u0133\7q\2\2\u0133\u0134\7q\2\2\u0134\u0135\7t\2\2\u0135R\3\2\2\2\u0136"+
		"\u0137\7e\2\2\u0137\u0138\7g\2\2\u0138\u0139\7k\2\2\u0139\u013a\7n\2\2"+
		"\u013aT\3\2\2\2\u013b\u013c\7c\2\2\u013c\u013d\7d\2\2\u013d\u013e\7u\2"+
		"\2\u013eV\3\2\2\2\u013f\u0140\7p\2\2\u0140\u0141\7q\2\2\u0141\u0142\7"+
		"v\2\2\u0142X\3\2\2\2\u0143\u0144\7/\2\2\u0144Z\3\2\2\2\u0145\u0146\7-"+
		"\2\2\u0146\\\3\2\2\2\u0147\u0148\7\61\2\2\u0148^\3\2\2\2\u0149\u014a\7"+
		",\2\2\u014a`\3\2\2\2\u014b\u014c\7\'\2\2\u014cb\3\2\2\2\u014d\u014e\7"+
		">\2\2\u014ed\3\2\2\2\u014f\u0150\7@\2\2\u0150f\3\2\2\2\u0151\u0152\7>"+
		"\2\2\u0152\u0153\7?\2\2\u0153h\3\2\2\2\u0154\u0155\7@\2\2\u0155\u0156"+
		"\7?\2\2\u0156j\3\2\2\2\u0157\u0158\7?\2\2\u0158\u0159\7?\2\2\u0159l\3"+
		"\2\2\2\u015a\u015b\7#\2\2\u015b\u015c\7?\2\2\u015cn\3\2\2\2\u015d\u015e"+
		"\7(\2\2\u015e\u015f\7(\2\2\u015fp\3\2\2\2\u0160\u0161\7~\2\2\u0161\u0162"+
		"\7~\2\2\u0162r\3\2\2\2\u0163\u0165\t\2\2\2\u0164\u0163\3\2\2\2\u0165\u0166"+
		"\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0168\3\2\2\2\u0168"+
		"\u0169\b:\2\2\u0169t\3\2\2\2\u016a\u016c\7]\2\2\u016b\u016d\5{>\2\u016c"+
		"\u016b\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u016f\7_"+
		"\2\2\u016f\u0175\3\2\2\2\u0170\u0172\7]\2\2\u0171\u0173\5{>\2\u0172\u0171"+
		"\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0176\7_\2\2\u0175"+
		"\u0170\3\2\2\2\u0175\u0176\3\2\2\2\u0176v\3\2\2\2\u0177\u0178\7k\2\2\u0178"+
		"\u0179\7p\2\2\u0179\u018e\7v\2\2\u017a\u017b\7h\2\2\u017b\u017c\7n\2\2"+
		"\u017c\u017d\7q\2\2\u017d\u017e\7c\2\2\u017e\u018e\7v\2\2\u017f\u0180"+
		"\7u\2\2\u0180\u0181\7v\2\2\u0181\u0182\7t\2\2\u0182\u0183\7k\2\2\u0183"+
		"\u0184\7p\2\2\u0184\u018e\7i\2\2\u0185\u0186\7d\2\2\u0186\u0187\7q\2\2"+
		"\u0187\u0188\7q\2\2\u0188\u018e\7n\2\2\u0189\u018a\7x\2\2\u018a\u018b"+
		"\7q\2\2\u018b\u018c\7k\2\2\u018c\u018e\7f\2\2\u018d\u0177\3\2\2\2\u018d"+
		"\u017a\3\2\2\2\u018d\u017f\3\2\2\2\u018d\u0185\3\2\2\2\u018d\u0189\3\2"+
		"\2\2\u018ex\3\2\2\2\u018f\u0192\7a\2\2\u0190\u0192\5\u0085C\2\u0191\u018f"+
		"\3\2\2\2\u0191\u0190\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0191\3\2\2\2\u0193"+
		"\u0194\3\2\2\2\u0194\u019a\3\2\2\2\u0195\u0199\5\u0085C\2\u0196\u0199"+
		"\5}?\2\u0197\u0199\7a\2\2\u0198\u0195\3\2\2\2\u0198\u0196\3\2\2\2\u0198"+
		"\u0197\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2"+
		"\2\2\u019bz\3\2\2\2\u019c\u019a\3\2\2\2\u019d\u019f\5}?\2\u019e\u019d"+
		"\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1"+
		"|\3\2\2\2\u01a2\u01a3\4\62;\2\u01a3~\3\2\2\2\u01a4\u01a5\7v\2\2\u01a5"+
		"\u01a6\7t\2\2\u01a6\u01a7\7w\2\2\u01a7\u01ae\7g\2\2\u01a8\u01a9\7h\2\2"+
		"\u01a9\u01aa\7c\2\2\u01aa\u01ab\7n\2\2\u01ab\u01ac\7u\2\2\u01ac\u01ae"+
		"\7g\2\2\u01ad\u01a4\3\2\2\2\u01ad\u01a8\3\2\2\2\u01ae\u0080\3\2\2\2\u01af"+
		"\u01b3\7$\2\2\u01b0\u01b2\n\3\2\2\u01b1\u01b0\3\2\2\2\u01b2\u01b5\3\2"+
		"\2\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b6\3\2\2\2\u01b5"+
		"\u01b3\3\2\2\2\u01b6\u01b7\7$\2\2\u01b7\u0082\3\2\2\2\u01b8\u01ba\5}?"+
		"\2\u01b9\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01bc"+
		"\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\7\60\2\2\u01be\u01c0\5}?\2\u01bf"+
		"\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2"+
		"\2\2\u01c2\u0084\3\2\2\2\u01c3\u01c4\t\4\2\2\u01c4\u0086\3\2\2\2\21\2"+
		"\u0166\u016c\u0172\u0175\u018d\u0191\u0193\u0198\u019a\u01a0\u01ad\u01b3"+
		"\u01bb\u01c1\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}