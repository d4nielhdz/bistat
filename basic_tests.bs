Program BasicTests;

var int x;
var int[5] nums;

func recursive_fib(var int n;): int {
  if (n <= 1) {
    return n;
  }
  return recursive_fib(n - 1) + recursive_fib(n - 2);
}

func iterative_fib(var int n;): int 
var int pprev;
var int prev;
var int curr;
var int i;
{
  prev = 0;
  curr = 1;
  i = 1;
  while (i < n) {
    pprev = prev;
    prev = curr;
    curr = pprev + prev;
    i = i + 1;
  }
  return curr;
}

func recursive_fac (var int x;): int {
  if (x == 1) {
    return x;
  }
  return x * recursive_fac(x - 1);
}

func iterative_fac(var int x;): int 
  var int product;
  var int i;
{
  product = 1;
  i = 1;
  while (i <= x) {
    product = product * i;
    i = i + 1;
  }
  return product;
}

func bubbleSort(): void
  var int i;
  var int j;
  var int tmp;
  var int[4] arr;
 {
  i = 0;
  j = 0;
  arr = [4, 6, 1, 2];
  print(arr);
  while (i < 3) {
    j = 0;
    while (j < 3 - i) {
      if (listAccess(arr, j) > listAccess(arr, j + 1)) {
        tmp = listAccess(arr, j);
        listAssign(arr, j, listAccess(arr, j + 1));
        listAssign(arr, j+1, tmp);
      }
      j = j + 1;
    }
    i = i + 1;
  }
  print(arr);
}

func find(var int num;): int
  var int i;
 {
  i = 0;
  while (i < 5) {
    if (listAccess(nums, i) == num) {
      return i;
    }
    i = i + 1;
  }
  return -1;
}

func matmul(): void 
  var int[3][3] x;
  var int[3][4] y;
  var int[3][4] z;
  var int i;
  var int j;
  var int k;
{
  i = 0;
  j = 0;
  k = 0;
  x = [
    [12, 7, 3],
    [4, 5, 6],
    [7, 8, 9]
  ];
  y = [
    [5, 8, 1, 2],
    [6, 7, 3, 0],
    [4, 5, 9, 1]
  ];
  while (i < 3) {
    j = 0;
    while (j < 4) {
      k = 0;
      while (k < 3) {
        listAssign(z, i, j, listAccess(z, i, j) + listAccess(x, i, k) * listAccess(y, k, j));
        k = k + 1;
      }
      j = j + 1;
    }
    i = i + 1;
  }
  print(z);
}

main() {
  x = recursive_fib(9);
  print(x);
  x = iterative_fib(9);
  print(x);
  x = recursive_fac(7);
  print(x);
  x = iterative_fac(7);
  print(x);
  bubbleSort();
  nums = [6, 87, 35, 9, 3];
  x = find(11);
  print(x);
  matmul();
}